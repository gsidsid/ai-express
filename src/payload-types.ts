/* tslint:disable */
/**
 * This file was automatically generated by Payload CMS.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    prompts: Prompt;
    roles: Role;
    users: User;
  };
  globals: {};
}
export interface Prompt {
  id: string;
  model: 'gpt-3.5-turbo' | 'gpt-4' | 'gpt-4-32k';
  name: string;
  description?: string;
  role?: string | Role;
  prompt: string;
  validation: {
    validationEnabled?: boolean;
    maxRetries?: number;
    validationFunction?: string;
  };
  caching: {
    cachingEnabled?: boolean;
    cacheTTL?: number;
  };
  rateLimit: {
    rateLimitEnabled?: boolean;
    requestsPerUnit?: number;
    timeUnit?: 'minute' | 'hour' | 'day';
  };
  redaction: {
    redactionEnabled?: boolean;
    redactionMode?: 'redact' | 'fail';
    redactionOptions?: {
      redactType:
        | 'regex'
        | 'emailAddress'
        | 'phoneNumber'
        | 'creditCardNumber'
        | 'ipAddress'
        | 'names'
        | 'streetAddress'
        | 'zipcode'
        | 'url'
        | 'digits'
        | 'username'
        | 'password'
        | 'credentials'
        | 'usSocialSecurityNumber';
      regexValue: string;
      regexReplacement: string;
      id?: string;
    }[];
  };
  params: {
    temperature?: number;
    top_p?: number;
    presence_penalty?: number;
    frequency_penalty?: number;
    logit_bias?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  createdAt: string;
  updatedAt: string;
}
export interface Role {
  id: string;
  name: string;
  value: string;
  createdAt: string;
  updatedAt: string;
}
export interface User {
  id: string;
  email?: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  loginAttempts?: number;
  lockUntil?: string;
  createdAt: string;
  updatedAt: string;
  password?: string;
}
